// <auto-generated />
using System;
using Intervu.Infrastructure.Persistence.SqlServer.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Intervu.Infrastructure.Migrations
{
    [DbContext(typeof(IntervuDbContext))]
    [Migration("20251027024208_InitCreate")]
    partial class InitCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Intervu.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AIAnalysis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InterviewerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InterviewerId");

                    b.HasIndex("StudentId");

                    b.ToTable("Feedbacks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AIAnalysis = "{}",
                            Comments = "Great answers and communication.",
                            InterviewerId = 2,
                            Rating = 5,
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("Intervu.Domain.Entities.InterviewRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<int>("InterviewerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("VideoCallRoomUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("InterviewerId");

                    b.HasIndex("StudentId");

                    b.ToTable("InterviewRooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DurationMinutes = 60,
                            InterviewerId = 2,
                            ScheduledTime = new DateTime(2025, 11, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            StudentId = 1,
                            VideoCallRoomUrl = "https://meet.example/room1"
                        });
                });

            modelBuilder.Entity("Intervu.Domain.Entities.IntervieweeProfile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CurrentAmount")
                        .HasColumnType("int");

                    b.Property<string>("PortfolioUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IntervieweeProfiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Aspiring backend developer.",
                            CVUrl = "https://example.com/cv-alice.pdf",
                            CurrentAmount = 0,
                            PortfolioUrl = "https://portfolio.example.com/alice",
                            Skills = "[C#, SQL]"
                        });
                });

            modelBuilder.Entity("Intervu.Domain.Entities.InterviewerAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InterviewerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InterviewerId");

                    b.ToTable("InterviewerAvailabilities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndTime = new DateTime(2025, 11, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewerId = 2,
                            IsBooked = false,
                            StartTime = new DateTime(2025, 11, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Intervu.Domain.Entities.InterviewerProfile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVUrl")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CurrentAmount")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("PortfolioUrl")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ProgrammingLanguages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specializations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InterviewerProfiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Bio = "Senior software engineer",
                            CVUrl = "https://example.com/cv-bob.pdf",
                            Company = "Tech Co",
                            CurrentAmount = 0,
                            ExperienceYears = 8,
                            IsVerified = true,
                            PortfolioUrl = "https://portfolio.example.com/bob",
                            ProgrammingLanguages = "C#, JavaScript",
                            Specializations = "Backend, System Design"
                        });
                });

            modelBuilder.Entity("Intervu.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Welcome to Intervu platform",
                            Title = "Welcome"
                        });
                });

            modelBuilder.Entity("Intervu.Domain.Entities.NotificationReceive", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId", "ReceiverId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("NotificationReceives", (string)null);

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            ReceiverId = 1
                        });
                });

            modelBuilder.Entity("Intervu.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InterviewRoomId")
                        .HasColumnType("int");

                    b.Property<int>("IntervieweeId")
                        .HasColumnType("int");

                    b.Property<int>("InterviewerId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InterviewRoomId");

                    b.HasIndex("IntervieweeId");

                    b.HasIndex("InterviewerId");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 50.00m,
                            InterviewRoomId = 1,
                            IntervieweeId = 1,
                            InterviewerId = 2,
                            PaymentMethod = "Card",
                            Status = 0,
                            TransactionDate = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Intervu.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice@example.com",
                            FullName = "Alice Student",
                            Password = "hashedpassword",
                            Role = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob@example.com",
                            FullName = "Bob Interviewer",
                            Password = "hashedpassword",
                            Role = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "admin@example.com",
                            FullName = "Admin",
                            Password = "hashedpassword",
                            Role = 2,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Intervu.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Intervu.Domain.Entities.InterviewerProfile", null)
                        .WithMany()
                        .HasForeignKey("InterviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Intervu.Domain.Entities.IntervieweeProfile", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Intervu.Domain.Entities.InterviewRoom", b =>
                {
                    b.HasOne("Intervu.Domain.Entities.InterviewerProfile", null)
                        .WithMany()
                        .HasForeignKey("InterviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Intervu.Domain.Entities.IntervieweeProfile", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Intervu.Domain.Entities.IntervieweeProfile", b =>
                {
                    b.HasOne("Intervu.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Intervu.Domain.Entities.IntervieweeProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Intervu.Domain.Entities.InterviewerAvailability", b =>
                {
                    b.HasOne("Intervu.Domain.Entities.InterviewerProfile", null)
                        .WithMany()
                        .HasForeignKey("InterviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Intervu.Domain.Entities.InterviewerProfile", b =>
                {
                    b.HasOne("Intervu.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Intervu.Domain.Entities.InterviewerProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Intervu.Domain.Entities.NotificationReceive", b =>
                {
                    b.HasOne("Intervu.Domain.Entities.Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intervu.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Intervu.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Intervu.Domain.Entities.InterviewRoom", null)
                        .WithMany()
                        .HasForeignKey("InterviewRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intervu.Domain.Entities.IntervieweeProfile", null)
                        .WithMany()
                        .HasForeignKey("IntervieweeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Intervu.Domain.Entities.InterviewerProfile", null)
                        .WithMany()
                        .HasForeignKey("InterviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
